// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"github.com/vattle/sqlboiler/types"
	"gopkg.in/nullbio/null.v6"
)

// Sermon is an object representing the database table.
type Sermon struct {
	ID            int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	UpdatedBy     string            `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	Title         string            `boil:"title" json:"title" toml:"title" yaml:"title"`
	Slug          null.String       `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	Published     bool              `boil:"published" json:"published" toml:"published" yaml:"published"`
	Summary       null.String       `boil:"summary" json:"summary,omitempty" toml:"summary" yaml:"summary,omitempty"`
	Body          null.String       `boil:"body" json:"body,omitempty" toml:"body" yaml:"body,omitempty"`
	AudioLink     null.String       `boil:"audio_link" json:"audio_link,omitempty" toml:"audio_link" yaml:"audio_link,omitempty"`
	DateTaught    time.Time         `boil:"date_taught" json:"date_taught" toml:"date_taught" yaml:"date_taught"`
	PlaceTaught   null.String       `boil:"place_taught" json:"place_taught,omitempty" toml:"place_taught" yaml:"place_taught,omitempty"`
	Teacher       string            `boil:"teacher" json:"teacher" toml:"teacher" yaml:"teacher"`
	ScriptureRefs types.StringArray `boil:"scripture_refs" json:"scripture_refs" toml:"scripture_refs" yaml:"scripture_refs"`
	Categories    types.StringArray `boil:"categories" json:"categories" toml:"categories" yaml:"categories"`

	R *sermonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sermonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SermonColumns = struct {
	ID            string
	CreatedAt     string
	UpdatedAt     string
	UpdatedBy     string
	Title         string
	Slug          string
	Published     string
	Summary       string
	Body          string
	AudioLink     string
	DateTaught    string
	PlaceTaught   string
	Teacher       string
	ScriptureRefs string
	Categories    string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	UpdatedBy:     "updated_by",
	Title:         "title",
	Slug:          "slug",
	Published:     "published",
	Summary:       "summary",
	Body:          "body",
	AudioLink:     "audio_link",
	DateTaught:    "date_taught",
	PlaceTaught:   "place_taught",
	Teacher:       "teacher",
	ScriptureRefs: "scripture_refs",
	Categories:    "categories",
}

// sermonR is where relationships are stored.
type sermonR struct {
}

// sermonL is where Load methods for each relationship are stored.
type sermonL struct{}

var (
	sermonColumns               = []string{"id", "created_at", "updated_at", "updated_by", "title", "slug", "published", "summary", "body", "audio_link", "date_taught", "place_taught", "teacher", "scripture_refs", "categories"}
	sermonColumnsWithoutDefault = []string{"created_at", "updated_at", "updated_by", "title", "slug", "published", "summary", "body", "audio_link", "date_taught", "place_taught", "teacher", "scripture_refs", "categories"}
	sermonColumnsWithDefault    = []string{"id"}
	sermonPrimaryKeyColumns     = []string{"id"}
)

type (
	// SermonSlice is an alias for a slice of pointers to Sermon.
	// This should generally be used opposed to []Sermon.
	SermonSlice []*Sermon
	// SermonHook is the signature for custom Sermon hook methods
	SermonHook func(boil.Executor, *Sermon) error

	sermonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sermonType                 = reflect.TypeOf(&Sermon{})
	sermonMapping              = queries.MakeStructMapping(sermonType)
	sermonPrimaryKeyMapping, _ = queries.BindMapping(sermonType, sermonMapping, sermonPrimaryKeyColumns)
	sermonInsertCacheMut       sync.RWMutex
	sermonInsertCache          = make(map[string]insertCache)
	sermonUpdateCacheMut       sync.RWMutex
	sermonUpdateCache          = make(map[string]updateCache)
	sermonUpsertCacheMut       sync.RWMutex
	sermonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var sermonBeforeInsertHooks []SermonHook
var sermonBeforeUpdateHooks []SermonHook
var sermonBeforeDeleteHooks []SermonHook
var sermonBeforeUpsertHooks []SermonHook

var sermonAfterInsertHooks []SermonHook
var sermonAfterSelectHooks []SermonHook
var sermonAfterUpdateHooks []SermonHook
var sermonAfterDeleteHooks []SermonHook
var sermonAfterUpsertHooks []SermonHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Sermon) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range sermonBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Sermon) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range sermonBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Sermon) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range sermonBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Sermon) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range sermonBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Sermon) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range sermonAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Sermon) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range sermonAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Sermon) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range sermonAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Sermon) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range sermonAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Sermon) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range sermonAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSermonHook registers your hook function for all future operations.
func AddSermonHook(hookPoint boil.HookPoint, sermonHook SermonHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sermonBeforeInsertHooks = append(sermonBeforeInsertHooks, sermonHook)
	case boil.BeforeUpdateHook:
		sermonBeforeUpdateHooks = append(sermonBeforeUpdateHooks, sermonHook)
	case boil.BeforeDeleteHook:
		sermonBeforeDeleteHooks = append(sermonBeforeDeleteHooks, sermonHook)
	case boil.BeforeUpsertHook:
		sermonBeforeUpsertHooks = append(sermonBeforeUpsertHooks, sermonHook)
	case boil.AfterInsertHook:
		sermonAfterInsertHooks = append(sermonAfterInsertHooks, sermonHook)
	case boil.AfterSelectHook:
		sermonAfterSelectHooks = append(sermonAfterSelectHooks, sermonHook)
	case boil.AfterUpdateHook:
		sermonAfterUpdateHooks = append(sermonAfterUpdateHooks, sermonHook)
	case boil.AfterDeleteHook:
		sermonAfterDeleteHooks = append(sermonAfterDeleteHooks, sermonHook)
	case boil.AfterUpsertHook:
		sermonAfterUpsertHooks = append(sermonAfterUpsertHooks, sermonHook)
	}
}

// OneP returns a single sermon record from the query, and panics on error.
func (q sermonQuery) OneP() *Sermon {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single sermon record from the query.
func (q sermonQuery) One() (*Sermon, error) {
	o := &Sermon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sermons")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Sermon records from the query, and panics on error.
func (q sermonQuery) AllP() SermonSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Sermon records from the query.
func (q sermonQuery) All() (SermonSlice, error) {
	var o []*Sermon

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Sermon slice")
	}

	if len(sermonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Sermon records in the query, and panics on error.
func (q sermonQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Sermon records in the query.
func (q sermonQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sermons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q sermonQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q sermonQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sermons exists")
	}

	return count > 0, nil
}

// SermonsG retrieves all records.
func SermonsG(mods ...qm.QueryMod) sermonQuery {
	return Sermons(boil.GetDB(), mods...)
}

// Sermons retrieves all the records using an executor.
func Sermons(exec boil.Executor, mods ...qm.QueryMod) sermonQuery {
	mods = append(mods, qm.From("\"sermons\""))
	return sermonQuery{NewQuery(exec, mods...)}
}

// FindSermonG retrieves a single record by ID.
func FindSermonG(id int64, selectCols ...string) (*Sermon, error) {
	return FindSermon(boil.GetDB(), id, selectCols...)
}

// FindSermonGP retrieves a single record by ID, and panics on error.
func FindSermonGP(id int64, selectCols ...string) *Sermon {
	retobj, err := FindSermon(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSermon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSermon(exec boil.Executor, id int64, selectCols ...string) (*Sermon, error) {
	sermonObj := &Sermon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sermons\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(sermonObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sermons")
	}

	return sermonObj, nil
}

// FindSermonP retrieves a single record by ID with an executor, and panics on error.
func FindSermonP(exec boil.Executor, id int64, selectCols ...string) *Sermon {
	retobj, err := FindSermon(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Sermon) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Sermon) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Sermon) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Sermon) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sermons provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sermonColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	sermonInsertCacheMut.RLock()
	cache, cached := sermonInsertCache[key]
	sermonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			sermonColumns,
			sermonColumnsWithDefault,
			sermonColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(sermonType, sermonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sermonType, sermonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sermons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sermons\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sermons")
	}

	if !cached {
		sermonInsertCacheMut.Lock()
		sermonInsertCache[key] = cache
		sermonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Sermon record. See Update for
// whitelist behavior description.
func (o *Sermon) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Sermon record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Sermon) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Sermon, and panics on error.
// See Update for whitelist behavior description.
func (o *Sermon) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Sermon.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Sermon) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	sermonUpdateCacheMut.RLock()
	cache, cached := sermonUpdateCache[key]
	sermonUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			sermonColumns,
			sermonPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update sermons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sermons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sermonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sermonType, sermonMapping, append(wl, sermonPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update sermons row")
	}

	if !cached {
		sermonUpdateCacheMut.Lock()
		sermonUpdateCache[key] = cache
		sermonUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q sermonQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q sermonQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for sermons")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SermonSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SermonSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SermonSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SermonSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sermonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sermons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sermonPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in sermon slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Sermon) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Sermon) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Sermon) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Sermon) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sermons provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sermonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sermonUpsertCacheMut.RLock()
	cache, cached := sermonUpsertCache[key]
	sermonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			sermonColumns,
			sermonColumnsWithDefault,
			sermonColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			sermonColumns,
			sermonPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert sermons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sermonPrimaryKeyColumns))
			copy(conflict, sermonPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"sermons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sermonType, sermonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sermonType, sermonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sermons")
	}

	if !cached {
		sermonUpsertCacheMut.Lock()
		sermonUpsertCache[key] = cache
		sermonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Sermon record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Sermon) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Sermon record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Sermon) DeleteG() error {
	if o == nil {
		return errors.New("models: no Sermon provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Sermon record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Sermon) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Sermon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sermon) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Sermon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sermonPrimaryKeyMapping)
	sql := "DELETE FROM \"sermons\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from sermons")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q sermonQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q sermonQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no sermonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from sermons")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SermonSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SermonSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Sermon slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SermonSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SermonSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Sermon slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(sermonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sermonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sermons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sermonPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from sermon slice")
	}

	if len(sermonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Sermon) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Sermon) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Sermon) ReloadG() error {
	if o == nil {
		return errors.New("models: no Sermon provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sermon) Reload(exec boil.Executor) error {
	ret, err := FindSermon(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SermonSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SermonSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SermonSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SermonSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SermonSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	sermons := SermonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sermonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sermons\".* FROM \"sermons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sermonPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&sermons)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SermonSlice")
	}

	*o = sermons

	return nil
}

// SermonExists checks if the Sermon row exists.
func SermonExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sermons\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sermons exists")
	}

	return exists, nil
}

// SermonExistsG checks if the Sermon row exists.
func SermonExistsG(id int64) (bool, error) {
	return SermonExists(boil.GetDB(), id)
}

// SermonExistsGP checks if the Sermon row exists. Panics on error.
func SermonExistsGP(id int64) bool {
	e, err := SermonExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SermonExistsP checks if the Sermon row exists. Panics on error.
func SermonExistsP(exec boil.Executor, id int64) bool {
	e, err := SermonExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
