// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Articles", testArticles)
	t.Run("Events", testEvents)
	t.Run("GooseDBVersions", testGooseDBVersions)
	t.Run("Images", testImages)
	t.Run("MenuDefs", testMenuDefs)
	t.Run("Pages", testPages)
	t.Run("Sermons", testSermons)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Articles", testArticlesDelete)
	t.Run("Events", testEventsDelete)
	t.Run("GooseDBVersions", testGooseDBVersionsDelete)
	t.Run("Images", testImagesDelete)
	t.Run("MenuDefs", testMenuDefsDelete)
	t.Run("Pages", testPagesDelete)
	t.Run("Sermons", testSermonsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Articles", testArticlesQueryDeleteAll)
	t.Run("Events", testEventsQueryDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsQueryDeleteAll)
	t.Run("Images", testImagesQueryDeleteAll)
	t.Run("MenuDefs", testMenuDefsQueryDeleteAll)
	t.Run("Pages", testPagesQueryDeleteAll)
	t.Run("Sermons", testSermonsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Articles", testArticlesSliceDeleteAll)
	t.Run("Events", testEventsSliceDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceDeleteAll)
	t.Run("Images", testImagesSliceDeleteAll)
	t.Run("MenuDefs", testMenuDefsSliceDeleteAll)
	t.Run("Pages", testPagesSliceDeleteAll)
	t.Run("Sermons", testSermonsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Articles", testArticlesExists)
	t.Run("Events", testEventsExists)
	t.Run("GooseDBVersions", testGooseDBVersionsExists)
	t.Run("Images", testImagesExists)
	t.Run("MenuDefs", testMenuDefsExists)
	t.Run("Pages", testPagesExists)
	t.Run("Sermons", testSermonsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Articles", testArticlesFind)
	t.Run("Events", testEventsFind)
	t.Run("GooseDBVersions", testGooseDBVersionsFind)
	t.Run("Images", testImagesFind)
	t.Run("MenuDefs", testMenuDefsFind)
	t.Run("Pages", testPagesFind)
	t.Run("Sermons", testSermonsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Articles", testArticlesBind)
	t.Run("Events", testEventsBind)
	t.Run("GooseDBVersions", testGooseDBVersionsBind)
	t.Run("Images", testImagesBind)
	t.Run("MenuDefs", testMenuDefsBind)
	t.Run("Pages", testPagesBind)
	t.Run("Sermons", testSermonsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Articles", testArticlesOne)
	t.Run("Events", testEventsOne)
	t.Run("GooseDBVersions", testGooseDBVersionsOne)
	t.Run("Images", testImagesOne)
	t.Run("MenuDefs", testMenuDefsOne)
	t.Run("Pages", testPagesOne)
	t.Run("Sermons", testSermonsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Articles", testArticlesAll)
	t.Run("Events", testEventsAll)
	t.Run("GooseDBVersions", testGooseDBVersionsAll)
	t.Run("Images", testImagesAll)
	t.Run("MenuDefs", testMenuDefsAll)
	t.Run("Pages", testPagesAll)
	t.Run("Sermons", testSermonsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Articles", testArticlesCount)
	t.Run("Events", testEventsCount)
	t.Run("GooseDBVersions", testGooseDBVersionsCount)
	t.Run("Images", testImagesCount)
	t.Run("MenuDefs", testMenuDefsCount)
	t.Run("Pages", testPagesCount)
	t.Run("Sermons", testSermonsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Articles", testArticlesHooks)
	t.Run("Events", testEventsHooks)
	t.Run("GooseDBVersions", testGooseDBVersionsHooks)
	t.Run("Images", testImagesHooks)
	t.Run("MenuDefs", testMenuDefsHooks)
	t.Run("Pages", testPagesHooks)
	t.Run("Sermons", testSermonsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Articles", testArticlesInsert)
	t.Run("Articles", testArticlesInsertWhitelist)
	t.Run("Events", testEventsInsert)
	t.Run("Events", testEventsInsertWhitelist)
	t.Run("GooseDBVersions", testGooseDBVersionsInsert)
	t.Run("GooseDBVersions", testGooseDBVersionsInsertWhitelist)
	t.Run("Images", testImagesInsert)
	t.Run("Images", testImagesInsertWhitelist)
	t.Run("MenuDefs", testMenuDefsInsert)
	t.Run("MenuDefs", testMenuDefsInsertWhitelist)
	t.Run("Pages", testPagesInsert)
	t.Run("Pages", testPagesInsertWhitelist)
	t.Run("Sermons", testSermonsInsert)
	t.Run("Sermons", testSermonsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Articles", testArticlesReload)
	t.Run("Events", testEventsReload)
	t.Run("GooseDBVersions", testGooseDBVersionsReload)
	t.Run("Images", testImagesReload)
	t.Run("MenuDefs", testMenuDefsReload)
	t.Run("Pages", testPagesReload)
	t.Run("Sermons", testSermonsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Articles", testArticlesReloadAll)
	t.Run("Events", testEventsReloadAll)
	t.Run("GooseDBVersions", testGooseDBVersionsReloadAll)
	t.Run("Images", testImagesReloadAll)
	t.Run("MenuDefs", testMenuDefsReloadAll)
	t.Run("Pages", testPagesReloadAll)
	t.Run("Sermons", testSermonsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Articles", testArticlesSelect)
	t.Run("Events", testEventsSelect)
	t.Run("GooseDBVersions", testGooseDBVersionsSelect)
	t.Run("Images", testImagesSelect)
	t.Run("MenuDefs", testMenuDefsSelect)
	t.Run("Pages", testPagesSelect)
	t.Run("Sermons", testSermonsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Articles", testArticlesUpdate)
	t.Run("Events", testEventsUpdate)
	t.Run("GooseDBVersions", testGooseDBVersionsUpdate)
	t.Run("Images", testImagesUpdate)
	t.Run("MenuDefs", testMenuDefsUpdate)
	t.Run("Pages", testPagesUpdate)
	t.Run("Sermons", testSermonsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Articles", testArticlesSliceUpdateAll)
	t.Run("Events", testEventsSliceUpdateAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceUpdateAll)
	t.Run("Images", testImagesSliceUpdateAll)
	t.Run("MenuDefs", testMenuDefsSliceUpdateAll)
	t.Run("Pages", testPagesSliceUpdateAll)
	t.Run("Sermons", testSermonsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Articles", testArticlesUpsert)
	t.Run("Events", testEventsUpsert)
	t.Run("GooseDBVersions", testGooseDBVersionsUpsert)
	t.Run("Images", testImagesUpsert)
	t.Run("MenuDefs", testMenuDefsUpsert)
	t.Run("Pages", testPagesUpsert)
	t.Run("Sermons", testSermonsUpsert)
	t.Run("Users", testUsersUpsert)
}
