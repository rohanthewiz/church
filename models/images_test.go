// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testImages(t *testing.T) {
	t.Parallel()

	query := Images(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testImagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = image.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Images(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Images(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Images(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ImageSlice{image}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Images(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testImagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ImageExists(tx, image.ID)
	if err != nil {
		t.Errorf("Unable to check if Image exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ImageExistsG to return true, but got false.")
	}
}
func testImagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	imageFound, err := FindImage(tx, image.ID)
	if err != nil {
		t.Error(err)
	}

	if imageFound == nil {
		t.Error("want a record, got nil")
	}
}
func testImagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Images(tx).Bind(image); err != nil {
		t.Error(err)
	}
}

func testImagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Images(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testImagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	imageOne := &Image{}
	imageTwo := &Image{}
	if err = randomize.Struct(seed, imageOne, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}
	if err = randomize.Struct(seed, imageTwo, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = imageOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = imageTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Images(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testImagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	imageOne := &Image{}
	imageTwo := &Image{}
	if err = randomize.Struct(seed, imageOne, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}
	if err = randomize.Struct(seed, imageTwo, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = imageOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = imageTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Images(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func imageBeforeInsertHook(e boil.Executor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterInsertHook(e boil.Executor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterSelectHook(e boil.Executor, o *Image) error {
	*o = Image{}
	return nil
}

func imageBeforeUpdateHook(e boil.Executor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterUpdateHook(e boil.Executor, o *Image) error {
	*o = Image{}
	return nil
}

func imageBeforeDeleteHook(e boil.Executor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterDeleteHook(e boil.Executor, o *Image) error {
	*o = Image{}
	return nil
}

func imageBeforeUpsertHook(e boil.Executor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterUpsertHook(e boil.Executor, o *Image) error {
	*o = Image{}
	return nil
}

func testImagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Image{}
	o := &Image{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, imageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Image object: %s", err)
	}

	AddImageHook(boil.BeforeInsertHook, imageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	imageBeforeInsertHooks = []ImageHook{}

	AddImageHook(boil.AfterInsertHook, imageAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	imageAfterInsertHooks = []ImageHook{}

	AddImageHook(boil.AfterSelectHook, imageAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	imageAfterSelectHooks = []ImageHook{}

	AddImageHook(boil.BeforeUpdateHook, imageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	imageBeforeUpdateHooks = []ImageHook{}

	AddImageHook(boil.AfterUpdateHook, imageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	imageAfterUpdateHooks = []ImageHook{}

	AddImageHook(boil.BeforeDeleteHook, imageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	imageBeforeDeleteHooks = []ImageHook{}

	AddImageHook(boil.AfterDeleteHook, imageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	imageAfterDeleteHooks = []ImageHook{}

	AddImageHook(boil.BeforeUpsertHook, imageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	imageBeforeUpsertHooks = []ImageHook{}

	AddImageHook(boil.AfterUpsertHook, imageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	imageAfterUpsertHooks = []ImageHook{}
}
func testImagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Images(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx, imageColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Images(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = image.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testImagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ImageSlice{image}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testImagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Images(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	imageDBTypes = map[string]string{`Categories`: `ARRAYtext`, `CreatedAt`: `timestamp with time zone`, `ID`: `bigint`, `ImageType`: `text`, `LargePath`: `text`, `Published`: `boolean`, `Slug`: `text`, `SmallB64`: `text`, `Summary`: `text`, `ThumbB64`: `text`, `Title`: `text`, `UpdatedAt`: `timestamp with time zone`, `UpdatedBy`: `text`}
	_            = bytes.MinRead
)

func testImagesUpdate(t *testing.T) {
	t.Parallel()

	if len(imageColumns) == len(imagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Images(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err = image.Update(tx); err != nil {
		t.Error(err)
	}
}

func testImagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(imageColumns) == len(imagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	image := &Image{}
	if err = randomize.Struct(seed, image, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Images(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, image, imageDBTypes, true, imagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(imageColumns, imagePrimaryKeyColumns) {
		fields = imageColumns
	} else {
		fields = strmangle.SetComplement(
			imageColumns,
			imagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(image))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ImageSlice{image}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testImagesUpsert(t *testing.T) {
	t.Parallel()

	if len(imageColumns) == len(imagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	image := Image{}
	if err = randomize.Struct(seed, &image, imageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = image.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Image: %s", err)
	}

	count, err := Images(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &image, imageDBTypes, false, imagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err = image.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Image: %s", err)
	}

	count, err = Images(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
