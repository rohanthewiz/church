// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testPages(t *testing.T) {
	t.Parallel()

	query := Pages(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = page.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Pages(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PageSlice{page}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PageExists(tx, page.ID)
	if err != nil {
		t.Errorf("Unable to check if Page exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PageExistsG to return true, but got false.")
	}
}
func testPagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	pageFound, err := FindPage(tx, page.ID)
	if err != nil {
		t.Error(err)
	}

	if pageFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Pages(tx).Bind(page); err != nil {
		t.Error(err)
	}
}

func testPagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Pages(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pageOne := &Page{}
	pageTwo := &Page{}
	if err = randomize.Struct(seed, pageOne, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}
	if err = randomize.Struct(seed, pageTwo, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pageOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = pageTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Pages(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pageOne := &Page{}
	pageTwo := &Page{}
	if err = randomize.Struct(seed, pageOne, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}
	if err = randomize.Struct(seed, pageTwo, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pageOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = pageTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func pageBeforeInsertHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterInsertHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterSelectHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageBeforeUpdateHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterUpdateHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageBeforeDeleteHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterDeleteHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageBeforeUpsertHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterUpsertHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func testPagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Page{}
	o := &Page{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Page object: %s", err)
	}

	AddPageHook(boil.BeforeInsertHook, pageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pageBeforeInsertHooks = []PageHook{}

	AddPageHook(boil.AfterInsertHook, pageAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pageAfterInsertHooks = []PageHook{}

	AddPageHook(boil.AfterSelectHook, pageAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pageAfterSelectHooks = []PageHook{}

	AddPageHook(boil.BeforeUpdateHook, pageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pageBeforeUpdateHooks = []PageHook{}

	AddPageHook(boil.AfterUpdateHook, pageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pageAfterUpdateHooks = []PageHook{}

	AddPageHook(boil.BeforeDeleteHook, pageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pageBeforeDeleteHooks = []PageHook{}

	AddPageHook(boil.AfterDeleteHook, pageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pageAfterDeleteHooks = []PageHook{}

	AddPageHook(boil.BeforeUpsertHook, pageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pageBeforeUpsertHooks = []PageHook{}

	AddPageHook(boil.AfterUpsertHook, pageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pageAfterUpsertHooks = []PageHook{}
}
func testPagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx, pageColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = page.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PageSlice{page}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Pages(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pageDBTypes = map[string]string{`AvailablePositions`: `ARRAYtext`, `CreatedAt`: `timestamp with time zone`, `Data`: `jsonb`, `ID`: `bigint`, `IsAdmin`: `boolean`, `IsHome`: `boolean`, `Published`: `boolean`, `Slug`: `text`, `Title`: `text`, `UpdatedAt`: `timestamp with time zone`, `UpdatedBy`: `text`}
	_           = bytes.MinRead
)

func testPagesUpdate(t *testing.T) {
	t.Parallel()

	if len(pageColumns) == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err = page.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pageColumns) == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, page, pageDBTypes, true, pagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pageColumns, pagePrimaryKeyColumns) {
		fields = pageColumns
	} else {
		fields = strmangle.SetComplement(
			pageColumns,
			pagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(page))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PageSlice{page}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPagesUpsert(t *testing.T) {
	t.Parallel()

	if len(pageColumns) == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	page := Page{}
	if err = randomize.Struct(seed, &page, pageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Page: %s", err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &page, pageDBTypes, false, pagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err = page.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Page: %s", err)
	}

	count, err = Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
