// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testMenuDefs(t *testing.T) {
	t.Parallel()

	query := MenuDefs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testMenuDefsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = menuDef.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := MenuDefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMenuDefsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = MenuDefs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := MenuDefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMenuDefsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MenuDefSlice{menuDef}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := MenuDefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testMenuDefsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := MenuDefExists(tx, menuDef.ID)
	if err != nil {
		t.Errorf("Unable to check if MenuDef exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MenuDefExistsG to return true, but got false.")
	}
}
func testMenuDefsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	menuDefFound, err := FindMenuDef(tx, menuDef.ID)
	if err != nil {
		t.Error(err)
	}

	if menuDefFound == nil {
		t.Error("want a record, got nil")
	}
}
func testMenuDefsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = MenuDefs(tx).Bind(menuDef); err != nil {
		t.Error(err)
	}
}

func testMenuDefsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := MenuDefs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMenuDefsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDefOne := &MenuDef{}
	menuDefTwo := &MenuDef{}
	if err = randomize.Struct(seed, menuDefOne, menuDefDBTypes, false, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}
	if err = randomize.Struct(seed, menuDefTwo, menuDefDBTypes, false, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDefOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = menuDefTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := MenuDefs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMenuDefsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	menuDefOne := &MenuDef{}
	menuDefTwo := &MenuDef{}
	if err = randomize.Struct(seed, menuDefOne, menuDefDBTypes, false, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}
	if err = randomize.Struct(seed, menuDefTwo, menuDefDBTypes, false, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDefOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = menuDefTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := MenuDefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func menuDefBeforeInsertHook(e boil.Executor, o *MenuDef) error {
	*o = MenuDef{}
	return nil
}

func menuDefAfterInsertHook(e boil.Executor, o *MenuDef) error {
	*o = MenuDef{}
	return nil
}

func menuDefAfterSelectHook(e boil.Executor, o *MenuDef) error {
	*o = MenuDef{}
	return nil
}

func menuDefBeforeUpdateHook(e boil.Executor, o *MenuDef) error {
	*o = MenuDef{}
	return nil
}

func menuDefAfterUpdateHook(e boil.Executor, o *MenuDef) error {
	*o = MenuDef{}
	return nil
}

func menuDefBeforeDeleteHook(e boil.Executor, o *MenuDef) error {
	*o = MenuDef{}
	return nil
}

func menuDefAfterDeleteHook(e boil.Executor, o *MenuDef) error {
	*o = MenuDef{}
	return nil
}

func menuDefBeforeUpsertHook(e boil.Executor, o *MenuDef) error {
	*o = MenuDef{}
	return nil
}

func menuDefAfterUpsertHook(e boil.Executor, o *MenuDef) error {
	*o = MenuDef{}
	return nil
}

func testMenuDefsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &MenuDef{}
	o := &MenuDef{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, menuDefDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MenuDef object: %s", err)
	}

	AddMenuDefHook(boil.BeforeInsertHook, menuDefBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	menuDefBeforeInsertHooks = []MenuDefHook{}

	AddMenuDefHook(boil.AfterInsertHook, menuDefAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	menuDefAfterInsertHooks = []MenuDefHook{}

	AddMenuDefHook(boil.AfterSelectHook, menuDefAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	menuDefAfterSelectHooks = []MenuDefHook{}

	AddMenuDefHook(boil.BeforeUpdateHook, menuDefBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	menuDefBeforeUpdateHooks = []MenuDefHook{}

	AddMenuDefHook(boil.AfterUpdateHook, menuDefAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	menuDefAfterUpdateHooks = []MenuDefHook{}

	AddMenuDefHook(boil.BeforeDeleteHook, menuDefBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	menuDefBeforeDeleteHooks = []MenuDefHook{}

	AddMenuDefHook(boil.AfterDeleteHook, menuDefAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	menuDefAfterDeleteHooks = []MenuDefHook{}

	AddMenuDefHook(boil.BeforeUpsertHook, menuDefBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	menuDefBeforeUpsertHooks = []MenuDefHook{}

	AddMenuDefHook(boil.AfterUpsertHook, menuDefAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	menuDefAfterUpsertHooks = []MenuDefHook{}
}
func testMenuDefsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := MenuDefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMenuDefsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx, menuDefColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := MenuDefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMenuDefsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = menuDef.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMenuDefsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MenuDefSlice{menuDef}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testMenuDefsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := MenuDefs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	menuDefDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `ID`: `bigint`, `IsAdmin`: `boolean`, `Items`: `jsonb`, `Published`: `boolean`, `Slug`: `text`, `Title`: `text`, `UpdatedAt`: `timestamp with time zone`, `UpdatedBy`: `text`}
	_              = bytes.MinRead
)

func testMenuDefsUpdate(t *testing.T) {
	t.Parallel()

	if len(menuDefColumns) == len(menuDefPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := MenuDefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	if err = menuDef.Update(tx); err != nil {
		t.Error(err)
	}
}

func testMenuDefsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(menuDefColumns) == len(menuDefPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	menuDef := &MenuDef{}
	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := MenuDefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, menuDef, menuDefDBTypes, true, menuDefPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(menuDefColumns, menuDefPrimaryKeyColumns) {
		fields = menuDefColumns
	} else {
		fields = strmangle.SetComplement(
			menuDefColumns,
			menuDefPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(menuDef))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := MenuDefSlice{menuDef}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testMenuDefsUpsert(t *testing.T) {
	t.Parallel()

	if len(menuDefColumns) == len(menuDefPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	menuDef := MenuDef{}
	if err = randomize.Struct(seed, &menuDef, menuDefDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = menuDef.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert MenuDef: %s", err)
	}

	count, err := MenuDefs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &menuDef, menuDefDBTypes, false, menuDefPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MenuDef struct: %s", err)
	}

	if err = menuDef.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert MenuDef: %s", err)
	}

	count, err = MenuDefs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
