// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"github.com/vattle/sqlboiler/types"
	"gopkg.in/nullbio/null.v6"
)

// Page is an object representing the database table.
type Page struct {
	ID                 int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt          null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt          null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	UpdatedBy          string            `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	Title              string            `boil:"title" json:"title" toml:"title" yaml:"title"`
	Slug               string            `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Published          bool              `boil:"published" json:"published" toml:"published" yaml:"published"`
	IsHome             bool              `boil:"is_home" json:"is_home" toml:"is_home" yaml:"is_home"`
	IsAdmin            bool              `boil:"is_admin" json:"is_admin" toml:"is_admin" yaml:"is_admin"`
	AvailablePositions types.StringArray `boil:"available_positions" json:"available_positions" toml:"available_positions" yaml:"available_positions"`
	Data               null.JSON         `boil:"data" json:"data,omitempty" toml:"data" yaml:"data,omitempty"`

	R *pageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PageColumns = struct {
	ID                 string
	CreatedAt          string
	UpdatedAt          string
	UpdatedBy          string
	Title              string
	Slug               string
	Published          string
	IsHome             string
	IsAdmin            string
	AvailablePositions string
	Data               string
}{
	ID:                 "id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	UpdatedBy:          "updated_by",
	Title:              "title",
	Slug:               "slug",
	Published:          "published",
	IsHome:             "is_home",
	IsAdmin:            "is_admin",
	AvailablePositions: "available_positions",
	Data:               "data",
}

// pageR is where relationships are stored.
type pageR struct {
}

// pageL is where Load methods for each relationship are stored.
type pageL struct{}

var (
	pageColumns               = []string{"id", "created_at", "updated_at", "updated_by", "title", "slug", "published", "is_home", "is_admin", "available_positions", "data"}
	pageColumnsWithoutDefault = []string{"created_at", "updated_at", "updated_by", "title", "slug", "published", "is_home", "is_admin", "available_positions", "data"}
	pageColumnsWithDefault    = []string{"id"}
	pagePrimaryKeyColumns     = []string{"id"}
)

type (
	// PageSlice is an alias for a slice of pointers to Page.
	// This should generally be used opposed to []Page.
	PageSlice []*Page
	// PageHook is the signature for custom Page hook methods
	PageHook func(boil.Executor, *Page) error

	pageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pageType                 = reflect.TypeOf(&Page{})
	pageMapping              = queries.MakeStructMapping(pageType)
	pagePrimaryKeyMapping, _ = queries.BindMapping(pageType, pageMapping, pagePrimaryKeyColumns)
	pageInsertCacheMut       sync.RWMutex
	pageInsertCache          = make(map[string]insertCache)
	pageUpdateCacheMut       sync.RWMutex
	pageUpdateCache          = make(map[string]updateCache)
	pageUpsertCacheMut       sync.RWMutex
	pageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var pageBeforeInsertHooks []PageHook
var pageBeforeUpdateHooks []PageHook
var pageBeforeDeleteHooks []PageHook
var pageBeforeUpsertHooks []PageHook

var pageAfterInsertHooks []PageHook
var pageAfterSelectHooks []PageHook
var pageAfterUpdateHooks []PageHook
var pageAfterDeleteHooks []PageHook
var pageAfterUpsertHooks []PageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Page) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pageBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Page) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pageBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Page) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pageBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Page) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pageBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Page) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pageAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Page) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range pageAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Page) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pageAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Page) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pageAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Page) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pageAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPageHook registers your hook function for all future operations.
func AddPageHook(hookPoint boil.HookPoint, pageHook PageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pageBeforeInsertHooks = append(pageBeforeInsertHooks, pageHook)
	case boil.BeforeUpdateHook:
		pageBeforeUpdateHooks = append(pageBeforeUpdateHooks, pageHook)
	case boil.BeforeDeleteHook:
		pageBeforeDeleteHooks = append(pageBeforeDeleteHooks, pageHook)
	case boil.BeforeUpsertHook:
		pageBeforeUpsertHooks = append(pageBeforeUpsertHooks, pageHook)
	case boil.AfterInsertHook:
		pageAfterInsertHooks = append(pageAfterInsertHooks, pageHook)
	case boil.AfterSelectHook:
		pageAfterSelectHooks = append(pageAfterSelectHooks, pageHook)
	case boil.AfterUpdateHook:
		pageAfterUpdateHooks = append(pageAfterUpdateHooks, pageHook)
	case boil.AfterDeleteHook:
		pageAfterDeleteHooks = append(pageAfterDeleteHooks, pageHook)
	case boil.AfterUpsertHook:
		pageAfterUpsertHooks = append(pageAfterUpsertHooks, pageHook)
	}
}

// OneP returns a single page record from the query, and panics on error.
func (q pageQuery) OneP() *Page {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single page record from the query.
func (q pageQuery) One() (*Page, error) {
	o := &Page{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pages")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Page records from the query, and panics on error.
func (q pageQuery) AllP() PageSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Page records from the query.
func (q pageQuery) All() (PageSlice, error) {
	var o []*Page

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Page slice")
	}

	if len(pageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Page records in the query, and panics on error.
func (q pageQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Page records in the query.
func (q pageQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q pageQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q pageQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pages exists")
	}

	return count > 0, nil
}

// PagesG retrieves all records.
func PagesG(mods ...qm.QueryMod) pageQuery {
	return Pages(boil.GetDB(), mods...)
}

// Pages retrieves all the records using an executor.
func Pages(exec boil.Executor, mods ...qm.QueryMod) pageQuery {
	mods = append(mods, qm.From("\"pages\""))
	return pageQuery{NewQuery(exec, mods...)}
}

// FindPageG retrieves a single record by ID.
func FindPageG(id int64, selectCols ...string) (*Page, error) {
	return FindPage(boil.GetDB(), id, selectCols...)
}

// FindPageGP retrieves a single record by ID, and panics on error.
func FindPageGP(id int64, selectCols ...string) *Page {
	retobj, err := FindPage(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPage(exec boil.Executor, id int64, selectCols ...string) (*Page, error) {
	pageObj := &Page{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(pageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pages")
	}

	return pageObj, nil
}

// FindPageP retrieves a single record by ID with an executor, and panics on error.
func FindPageP(exec boil.Executor, id int64, selectCols ...string) *Page {
	retobj, err := FindPage(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Page) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Page) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Page) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Page) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no pages provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	pageInsertCacheMut.RLock()
	cache, cached := pageInsertCache[key]
	pageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			pageColumns,
			pageColumnsWithDefault,
			pageColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(pageType, pageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pageType, pageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pages\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pages")
	}

	if !cached {
		pageInsertCacheMut.Lock()
		pageInsertCache[key] = cache
		pageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Page record. See Update for
// whitelist behavior description.
func (o *Page) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Page record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Page) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Page, and panics on error.
// See Update for whitelist behavior description.
func (o *Page) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Page.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Page) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	pageUpdateCacheMut.RLock()
	cache, cached := pageUpdateCache[key]
	pageUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			pageColumns,
			pagePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update pages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pageType, pageMapping, append(wl, pagePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update pages row")
	}

	if !cached {
		pageUpdateCacheMut.Lock()
		pageUpdateCache[key] = cache
		pageUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q pageQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q pageQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for pages")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PageSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PageSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PageSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PageSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in page slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Page) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Page) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Page) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Page) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no pages provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pageUpsertCacheMut.RLock()
	cache, cached := pageUpsertCache[key]
	pageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			pageColumns,
			pageColumnsWithDefault,
			pageColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			pageColumns,
			pagePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert pages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pagePrimaryKeyColumns))
			copy(conflict, pagePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"pages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pageType, pageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pageType, pageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pages")
	}

	if !cached {
		pageUpsertCacheMut.Lock()
		pageUpsertCache[key] = cache
		pageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Page record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Page) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Page record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Page) DeleteG() error {
	if o == nil {
		return errors.New("models: no Page provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Page record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Page) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Page record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Page) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Page provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pagePrimaryKeyMapping)
	sql := "DELETE FROM \"pages\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from pages")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q pageQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q pageQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no pageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from pages")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PageSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PageSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Page slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PageSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PageSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Page slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(pageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pagePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from page slice")
	}

	if len(pageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Page) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Page) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Page) ReloadG() error {
	if o == nil {
		return errors.New("models: no Page provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Page) Reload(exec boil.Executor) error {
	ret, err := FindPage(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PageSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PageSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PageSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PageSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PageSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	pages := PageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pages\".* FROM \"pages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pagePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&pages)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PageSlice")
	}

	*o = pages

	return nil
}

// PageExists checks if the Page row exists.
func PageExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pages\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pages exists")
	}

	return exists, nil
}

// PageExistsG checks if the Page row exists.
func PageExistsG(id int64) (bool, error) {
	return PageExists(boil.GetDB(), id)
}

// PageExistsGP checks if the Page row exists. Panics on error.
func PageExistsGP(id int64) bool {
	e, err := PageExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PageExistsP checks if the Page row exists. Panics on error.
func PageExistsP(exec boil.Executor, id int64) bool {
	e, err := PageExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
