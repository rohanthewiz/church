// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Charge is an object representing the database table.
type Charge struct {
	ID             int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt      null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	CustomerID     null.Int64  `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	CustomerName   string      `boil:"customer_name" json:"customer_name" toml:"customer_name" yaml:"customer_name"`
	Description    string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	ReceiptNumber  null.String `boil:"receipt_number" json:"receipt_number,omitempty" toml:"receipt_number" yaml:"receipt_number,omitempty"`
	ReceiptURL     null.String `boil:"receipt_url" json:"receipt_url,omitempty" toml:"receipt_url" yaml:"receipt_url,omitempty"`
	PaymentToken   string      `boil:"payment_token" json:"payment_token" toml:"payment_token" yaml:"payment_token"`
	Captured       null.Bool   `boil:"captured" json:"captured,omitempty" toml:"captured" yaml:"captured,omitempty"`
	Paid           null.Bool   `boil:"paid" json:"paid,omitempty" toml:"paid" yaml:"paid,omitempty"`
	Refunded       null.Bool   `boil:"refunded" json:"refunded,omitempty" toml:"refunded" yaml:"refunded,omitempty"`
	AmountRefunded null.Int    `boil:"amount_refunded" json:"amount_refunded,omitempty" toml:"amount_refunded" yaml:"amount_refunded,omitempty"`
	Meta           null.String `boil:"meta" json:"meta,omitempty" toml:"meta" yaml:"meta,omitempty"`

	R *chargeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chargeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChargeColumns = struct {
	ID             string
	CreatedAt      string
	UpdatedAt      string
	CustomerID     string
	CustomerName   string
	Description    string
	ReceiptNumber  string
	ReceiptURL     string
	PaymentToken   string
	Captured       string
	Paid           string
	Refunded       string
	AmountRefunded string
	Meta           string
}{
	ID:             "id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	CustomerID:     "customer_id",
	CustomerName:   "customer_name",
	Description:    "description",
	ReceiptNumber:  "receipt_number",
	ReceiptURL:     "receipt_url",
	PaymentToken:   "payment_token",
	Captured:       "captured",
	Paid:           "paid",
	Refunded:       "refunded",
	AmountRefunded: "amount_refunded",
	Meta:           "meta",
}

// chargeR is where relationships are stored.
type chargeR struct {
}

// chargeL is where Load methods for each relationship are stored.
type chargeL struct{}

var (
	chargeColumns               = []string{"id", "created_at", "updated_at", "customer_id", "customer_name", "description", "receipt_number", "receipt_url", "payment_token", "captured", "paid", "refunded", "amount_refunded", "meta"}
	chargeColumnsWithoutDefault = []string{"created_at", "updated_at", "customer_id", "customer_name", "description", "receipt_number", "receipt_url", "payment_token", "amount_refunded", "meta"}
	chargeColumnsWithDefault    = []string{"id", "captured", "paid", "refunded"}
	chargePrimaryKeyColumns     = []string{"id"}
)

type (
	// ChargeSlice is an alias for a slice of pointers to Charge.
	// This should generally be used opposed to []Charge.
	ChargeSlice []*Charge
	// ChargeHook is the signature for custom Charge hook methods
	ChargeHook func(boil.Executor, *Charge) error

	chargeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chargeType                 = reflect.TypeOf(&Charge{})
	chargeMapping              = queries.MakeStructMapping(chargeType)
	chargePrimaryKeyMapping, _ = queries.BindMapping(chargeType, chargeMapping, chargePrimaryKeyColumns)
	chargeInsertCacheMut       sync.RWMutex
	chargeInsertCache          = make(map[string]insertCache)
	chargeUpdateCacheMut       sync.RWMutex
	chargeUpdateCache          = make(map[string]updateCache)
	chargeUpsertCacheMut       sync.RWMutex
	chargeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var chargeBeforeInsertHooks []ChargeHook
var chargeBeforeUpdateHooks []ChargeHook
var chargeBeforeDeleteHooks []ChargeHook
var chargeBeforeUpsertHooks []ChargeHook

var chargeAfterInsertHooks []ChargeHook
var chargeAfterSelectHooks []ChargeHook
var chargeAfterUpdateHooks []ChargeHook
var chargeAfterDeleteHooks []ChargeHook
var chargeAfterUpsertHooks []ChargeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Charge) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chargeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Charge) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chargeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Charge) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chargeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Charge) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chargeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Charge) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chargeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Charge) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range chargeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Charge) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chargeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Charge) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chargeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Charge) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chargeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChargeHook registers your hook function for all future operations.
func AddChargeHook(hookPoint boil.HookPoint, chargeHook ChargeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		chargeBeforeInsertHooks = append(chargeBeforeInsertHooks, chargeHook)
	case boil.BeforeUpdateHook:
		chargeBeforeUpdateHooks = append(chargeBeforeUpdateHooks, chargeHook)
	case boil.BeforeDeleteHook:
		chargeBeforeDeleteHooks = append(chargeBeforeDeleteHooks, chargeHook)
	case boil.BeforeUpsertHook:
		chargeBeforeUpsertHooks = append(chargeBeforeUpsertHooks, chargeHook)
	case boil.AfterInsertHook:
		chargeAfterInsertHooks = append(chargeAfterInsertHooks, chargeHook)
	case boil.AfterSelectHook:
		chargeAfterSelectHooks = append(chargeAfterSelectHooks, chargeHook)
	case boil.AfterUpdateHook:
		chargeAfterUpdateHooks = append(chargeAfterUpdateHooks, chargeHook)
	case boil.AfterDeleteHook:
		chargeAfterDeleteHooks = append(chargeAfterDeleteHooks, chargeHook)
	case boil.AfterUpsertHook:
		chargeAfterUpsertHooks = append(chargeAfterUpsertHooks, chargeHook)
	}
}

// OneP returns a single charge record from the query, and panics on error.
func (q chargeQuery) OneP() *Charge {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single charge record from the query.
func (q chargeQuery) One() (*Charge, error) {
	o := &Charge{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for charges")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Charge records from the query, and panics on error.
func (q chargeQuery) AllP() ChargeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Charge records from the query.
func (q chargeQuery) All() (ChargeSlice, error) {
	var o []*Charge

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Charge slice")
	}

	if len(chargeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Charge records in the query, and panics on error.
func (q chargeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Charge records in the query.
func (q chargeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count charges rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q chargeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q chargeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if charges exists")
	}

	return count > 0, nil
}

// ChargesG retrieves all records.
func ChargesG(mods ...qm.QueryMod) chargeQuery {
	return Charges(boil.GetDB(), mods...)
}

// Charges retrieves all the records using an executor.
func Charges(exec boil.Executor, mods ...qm.QueryMod) chargeQuery {
	mods = append(mods, qm.From("\"charges\""))
	return chargeQuery{NewQuery(exec, mods...)}
}

// FindChargeG retrieves a single record by ID.
func FindChargeG(id int64, selectCols ...string) (*Charge, error) {
	return FindCharge(boil.GetDB(), id, selectCols...)
}

// FindChargeGP retrieves a single record by ID, and panics on error.
func FindChargeGP(id int64, selectCols ...string) *Charge {
	retobj, err := FindCharge(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCharge retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCharge(exec boil.Executor, id int64, selectCols ...string) (*Charge, error) {
	chargeObj := &Charge{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"charges\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(chargeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from charges")
	}

	return chargeObj, nil
}

// FindChargeP retrieves a single record by ID with an executor, and panics on error.
func FindChargeP(exec boil.Executor, id int64, selectCols ...string) *Charge {
	retobj, err := FindCharge(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Charge) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Charge) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Charge) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Charge) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no charges provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chargeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	chargeInsertCacheMut.RLock()
	cache, cached := chargeInsertCache[key]
	chargeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			chargeColumns,
			chargeColumnsWithDefault,
			chargeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(chargeType, chargeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chargeType, chargeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"charges\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"charges\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into charges")
	}

	if !cached {
		chargeInsertCacheMut.Lock()
		chargeInsertCache[key] = cache
		chargeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Charge record. See Update for
// whitelist behavior description.
func (o *Charge) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Charge record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Charge) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Charge, and panics on error.
// See Update for whitelist behavior description.
func (o *Charge) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Charge.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Charge) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	chargeUpdateCacheMut.RLock()
	cache, cached := chargeUpdateCache[key]
	chargeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			chargeColumns,
			chargePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update charges, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"charges\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chargePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chargeType, chargeMapping, append(wl, chargePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update charges row")
	}

	if !cached {
		chargeUpdateCacheMut.Lock()
		chargeUpdateCache[key] = cache
		chargeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q chargeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q chargeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for charges")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ChargeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ChargeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ChargeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChargeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"charges\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chargePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in charge slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Charge) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Charge) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Charge) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Charge) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no charges provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chargeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chargeUpsertCacheMut.RLock()
	cache, cached := chargeUpsertCache[key]
	chargeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			chargeColumns,
			chargeColumnsWithDefault,
			chargeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			chargeColumns,
			chargePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert charges, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chargePrimaryKeyColumns))
			copy(conflict, chargePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"charges\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chargeType, chargeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chargeType, chargeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert charges")
	}

	if !cached {
		chargeUpsertCacheMut.Lock()
		chargeUpsertCache[key] = cache
		chargeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Charge record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Charge) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Charge record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Charge) DeleteG() error {
	if o == nil {
		return errors.New("models: no Charge provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Charge record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Charge) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Charge record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Charge) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Charge provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chargePrimaryKeyMapping)
	sql := "DELETE FROM \"charges\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from charges")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q chargeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q chargeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no chargeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from charges")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ChargeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ChargeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Charge slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ChargeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChargeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Charge slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(chargeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"charges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chargePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from charge slice")
	}

	if len(chargeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Charge) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Charge) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Charge) ReloadG() error {
	if o == nil {
		return errors.New("models: no Charge provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Charge) Reload(exec boil.Executor) error {
	ret, err := FindCharge(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ChargeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ChargeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChargeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ChargeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChargeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	charges := ChargeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"charges\".* FROM \"charges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chargePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&charges)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChargeSlice")
	}

	*o = charges

	return nil
}

// ChargeExists checks if the Charge row exists.
func ChargeExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"charges\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if charges exists")
	}

	return exists, nil
}

// ChargeExistsG checks if the Charge row exists.
func ChargeExistsG(id int64) (bool, error) {
	return ChargeExists(boil.GetDB(), id)
}

// ChargeExistsGP checks if the Charge row exists. Panics on error.
func ChargeExistsGP(id int64) bool {
	e, err := ChargeExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ChargeExistsP checks if the Charge row exists. Panics on error.
func ChargeExistsP(exec boil.Executor, id int64) bool {
	e, err := ChargeExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
