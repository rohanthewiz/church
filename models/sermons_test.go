// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testSermons(t *testing.T) {
	t.Parallel()

	query := Sermons(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSermonsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = sermon.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Sermons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSermonsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Sermons(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Sermons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSermonsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SermonSlice{sermon}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Sermons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSermonsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SermonExists(tx, sermon.ID)
	if err != nil {
		t.Errorf("Unable to check if Sermon exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SermonExistsG to return true, but got false.")
	}
}
func testSermonsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	sermonFound, err := FindSermon(tx, sermon.ID)
	if err != nil {
		t.Error(err)
	}

	if sermonFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSermonsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Sermons(tx).Bind(sermon); err != nil {
		t.Error(err)
	}
}

func testSermonsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Sermons(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSermonsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermonOne := &Sermon{}
	sermonTwo := &Sermon{}
	if err = randomize.Struct(seed, sermonOne, sermonDBTypes, false, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}
	if err = randomize.Struct(seed, sermonTwo, sermonDBTypes, false, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermonOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = sermonTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Sermons(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSermonsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sermonOne := &Sermon{}
	sermonTwo := &Sermon{}
	if err = randomize.Struct(seed, sermonOne, sermonDBTypes, false, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}
	if err = randomize.Struct(seed, sermonTwo, sermonDBTypes, false, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermonOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = sermonTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sermons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func sermonBeforeInsertHook(e boil.Executor, o *Sermon) error {
	*o = Sermon{}
	return nil
}

func sermonAfterInsertHook(e boil.Executor, o *Sermon) error {
	*o = Sermon{}
	return nil
}

func sermonAfterSelectHook(e boil.Executor, o *Sermon) error {
	*o = Sermon{}
	return nil
}

func sermonBeforeUpdateHook(e boil.Executor, o *Sermon) error {
	*o = Sermon{}
	return nil
}

func sermonAfterUpdateHook(e boil.Executor, o *Sermon) error {
	*o = Sermon{}
	return nil
}

func sermonBeforeDeleteHook(e boil.Executor, o *Sermon) error {
	*o = Sermon{}
	return nil
}

func sermonAfterDeleteHook(e boil.Executor, o *Sermon) error {
	*o = Sermon{}
	return nil
}

func sermonBeforeUpsertHook(e boil.Executor, o *Sermon) error {
	*o = Sermon{}
	return nil
}

func sermonAfterUpsertHook(e boil.Executor, o *Sermon) error {
	*o = Sermon{}
	return nil
}

func testSermonsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Sermon{}
	o := &Sermon{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sermonDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Sermon object: %s", err)
	}

	AddSermonHook(boil.BeforeInsertHook, sermonBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sermonBeforeInsertHooks = []SermonHook{}

	AddSermonHook(boil.AfterInsertHook, sermonAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sermonAfterInsertHooks = []SermonHook{}

	AddSermonHook(boil.AfterSelectHook, sermonAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sermonAfterSelectHooks = []SermonHook{}

	AddSermonHook(boil.BeforeUpdateHook, sermonBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sermonBeforeUpdateHooks = []SermonHook{}

	AddSermonHook(boil.AfterUpdateHook, sermonAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sermonAfterUpdateHooks = []SermonHook{}

	AddSermonHook(boil.BeforeDeleteHook, sermonBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sermonBeforeDeleteHooks = []SermonHook{}

	AddSermonHook(boil.AfterDeleteHook, sermonAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sermonAfterDeleteHooks = []SermonHook{}

	AddSermonHook(boil.BeforeUpsertHook, sermonBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sermonBeforeUpsertHooks = []SermonHook{}

	AddSermonHook(boil.AfterUpsertHook, sermonAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sermonAfterUpsertHooks = []SermonHook{}
}
func testSermonsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sermons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSermonsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx, sermonColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Sermons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSermonsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = sermon.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSermonsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SermonSlice{sermon}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSermonsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Sermons(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sermonDBTypes = map[string]string{`AudioLink`: `text`, `Body`: `text`, `Categories`: `ARRAYtext`, `CreatedAt`: `timestamp with time zone`, `DateTaught`: `timestamp without time zone`, `ID`: `bigint`, `PlaceTaught`: `text`, `Published`: `boolean`, `ScriptureRefs`: `ARRAYtext`, `Slug`: `text`, `Summary`: `text`, `Teacher`: `text`, `Title`: `text`, `UpdatedAt`: `timestamp with time zone`, `UpdatedBy`: `text`}
	_             = bytes.MinRead
)

func testSermonsUpdate(t *testing.T) {
	t.Parallel()

	if len(sermonColumns) == len(sermonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sermons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	if err = sermon.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSermonsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sermonColumns) == len(sermonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	sermon := &Sermon{}
	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sermons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, sermon, sermonDBTypes, true, sermonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sermonColumns, sermonPrimaryKeyColumns) {
		fields = sermonColumns
	} else {
		fields = strmangle.SetComplement(
			sermonColumns,
			sermonPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(sermon))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SermonSlice{sermon}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSermonsUpsert(t *testing.T) {
	t.Parallel()

	if len(sermonColumns) == len(sermonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	sermon := Sermon{}
	if err = randomize.Struct(seed, &sermon, sermonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sermon.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Sermon: %s", err)
	}

	count, err := Sermons(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &sermon, sermonDBTypes, false, sermonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sermon struct: %s", err)
	}

	if err = sermon.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Sermon: %s", err)
	}

	count, err = Sermons(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
